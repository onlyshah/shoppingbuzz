{"ast":null,"code":"import { map } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.loggedInStatus = false;\n      this.userSubject = new BehaviorSubject(JSON.parse(sessionStorage.getItem('userData')));\n      // window.addEventListener('beforeunload', this.clearTokenOnClose);\n    }\n    ngOnInit() {\n      throw new Error('Method not implemented.');\n    }\n    get userValue() {\n      return this.userSubject.value;\n    }\n    SignUp(data) {\n      return this.http.post(environment.baseUrl + 'signup', data);\n    }\n    login(data) {\n      this.loggedInStatus = true;\n      return this.http.post(environment.baseUrl + 'login', data).pipe(map(user => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        sessionStorage.setItem('userData', JSON.stringify(user));\n        this.userSubject.next(user);\n        console.log(\"userSubject\", this.userSubject);\n        return user;\n      }));\n    }\n    logout() {\n      this.loggedInStatus = false;\n      // remove user from local storage to log user out\n      sessionStorage.removeItem('user');\n      this.userSubject.next(null);\n      this.router.navigate(['/login']);\n    }\n    getUser(id) {\n      return this.http.get(environment.baseUrl + 'getuser/' + id);\n    }\n    AddUseraddress(data, userId) {\n      return this.http.post(environment.baseUrl + 'addUseraddress/' + userId, data);\n    }\n    billsendtoEmail(data) {\n      return this.http.post(environment.baseUrl + 'email', data);\n    }\n    isLoggedIn() {\n      return this.loggedInStatus;\n    }\n    // private clearTokenOnClose = () => {\n    //   this.logout();\n    // }\n    ngOnDestroy() {\n      //window.removeEventListener('beforeunload', this.clearTokenOnClose);\n    }\n    sendResetLink(data) {\n      return this.http.post(environment.baseUrl + 'forgotpassword', data);\n    }\n    resetuserPassword(data) {\n      console.log(data);\n      return this.http.post(environment.baseUrl + 'resetpassword', data);\n    }\n    createOrder(amount) {\n      return this.http.post(environment.baseUrl + \"create-order\", {\n        amount\n      });\n    }\n    verifyPayment(paymentDetails) {\n      return this.http.post(environment.baseUrl + \"verify-paymen\", paymentDetails);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(ɵt) {\n      return new (ɵt || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}