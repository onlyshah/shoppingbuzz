{"ast":null,"code":"import { BehaviorSubject, Subject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CommonService = /*#__PURE__*/(() => {\n  class CommonService {\n    constructor(http) {\n      this.http = http;\n      this.subjectOBJ = new Subject();\n      this.cardCountSubject = new BehaviorSubject(0);\n      this.cardCount$ = this.cardCountSubject.asObservable();\n      this.wishlistCountSubject = new BehaviorSubject(0);\n      this.wishlistCount$ = this.wishlistCountSubject.asObservable();\n      this.searchSubject = new BehaviorSubject([]);\n      this.searchData$ = this.searchSubject.asObservable();\n      this.orderStatussubject = new BehaviorSubject([]);\n      this.orderStatussubjec$ = this.orderStatussubject.asObservable();\n    }\n    ngOnInit() {}\n    getCatgeory() {\n      return this.http.get(environment.baseUrl + 'getcategory');\n    }\n    getsubCatgeory() {\n      return this.http.get(environment.baseUrl + 'viewSubcategory');\n    }\n    getall() {\n      return this.http.get(environment.baseUrl + 'getall');\n    }\n    getcarousel() {\n      return this.http.get(environment.baseUrl + 'getcarousle');\n    }\n    getCardcarousel() {\n      return this.http.get(environment.baseUrl + 'getcardcarousel');\n    }\n    addtocart(data) {\n      return this.http.post(environment.baseUrl + 'cart/addtocart', data);\n    }\n    onUpdatecart(data) {\n      return this.http.put(environment.baseUrl + 'cart/updatecart', data);\n    }\n    getproduct() {\n      return this.http.get(environment.baseUrl + 'viewProducts');\n    }\n    addtowishlist(data) {\n      return this.http.post(environment.baseUrl + 'wishlist/createwishlist', data);\n    }\n    getproducttocart(userId) {\n      return this.http.get(environment.baseUrl + 'cart/getcart/' + userId).pipe(map(response => {\n        const productCount = response.productCount; // Assuming response contains productCount\n        this.cardCountSubject.next(productCount);\n        console.log('Updated cartState', this.cardCountSubject.value);\n        return response;\n      }));\n    }\n    getwishlist(userId) {\n      return this.http.get(environment.baseUrl + 'wishlist/getwishlist/' + userId).pipe(map(response => {\n        const ListCount = response.ListCount; // Assuming response contains productCount\n        this.wishlistCountSubject.next(ListCount);\n        console.log('Updated cartState', this.wishlistCountSubject.value);\n        return response;\n      }));\n    }\n    orderCreate(order) {\n      return this.http.post(environment.baseUrl + 'order/createorder', order);\n    }\n    getOrder(userId) {\n      return this.http.get(environment.baseUrl + 'order/getorderbyuserId/' + userId);\n    }\n    deleteWishlistprod(userId, productId) {\n      console.log(productId);\n      return this.http.delete(environment.baseUrl + 'wishlist/deletewishlist/' + userId + '/' + productId).pipe(map(response => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        this.subjectOBJ.asObservable();\n        this.subjectOBJ.next(response);\n        return response;\n      }));\n    }\n    deletecartItem(userId, productId) {\n      return this.http.delete(environment.baseUrl + 'cart/deletecartitem/' + userId + '/' + productId).pipe(map(response => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        this.subjectOBJ.asObservable();\n        this.subjectOBJ.next(response);\n        return response;\n      }));\n    }\n    deletecartItemByuserId(userId) {\n      return this.http.delete(environment.baseUrl + 'cart/deleteByuId/' + userId).pipe(map(response => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        this.subjectOBJ.asObservable();\n        this.subjectOBJ.next(response);\n        return response;\n      }));\n    }\n    SearchData(data) {\n      return this.http.get(`${environment.baseUrl}search?searchValue=${data}`).pipe(map(response => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        // this.searchSubject.asObservable();\n        // this.searchSubject.next(response);\n        // return response;\n        this.searchSubject.next(response);\n        return response;\n      }));\n    }\n    getSearchObservable() {\n      return this.searchSubject.asObservable();\n    }\n    updateSearchResults(results) {\n      console.log(\"*****\", results);\n      this.searchSubject.next(results);\n      console.log(results);\n    }\n    updateOrderStatus(orderId, data) {\n      return this.http.put(environment.baseUrl + 'order/update-status/' + orderId, data).pipe(map(response => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        this.orderStatussubject.asObservable();\n        this.orderStatussubject.next(response);\n        return response;\n      }));\n    }\n    static #_ = this.ɵfac = function CommonService_Factory(ɵt) {\n      return new (ɵt || CommonService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CommonService,\n      factory: CommonService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CommonService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}